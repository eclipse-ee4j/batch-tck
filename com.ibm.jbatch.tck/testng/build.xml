<!--
   Copyright 2012, 2020 International Business Machines Corp. and others

   See the NOTICE file distributed with this work for additional information
   regarding copyright ownership. Licensed under the Apache License,
   Version 2.0 (the "License"); you may not use this file except in compliance
   with the License. You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   SPDX-License-Identifier: Apache-2.0
 -->
<project name="batch_tck_testng" default="run" basedir="">

    <taskdef resource="testngtasks">
        <classpath>
            <pathelement location="lib/testng-@version.org.testng.testng@.jar"/>
            <pathelement location="lib/jcommander-@version.com.beust.jcommander@.jar"/>
        </classpath>
    </taskdef>

    <description>
        Jakarta Batch TCK
    </description>

    <!-- Modify this property to contain the location of the extracted TCK source -->
    <property name="src" location=""/>

    <!-- This location will contain the TCK class files after running the compile target -->
    <property name="build" location="build"/>

    <!-- Directory which will contain the TestNG report after running the TCK -->
    <property name="results" location="results"/>

    <!-- Override with value "EE" to run TestNG EE tests. -->
    <property name="tck.type" value="SE"/>

    <target name="compile" depends="init" description="Compile the Jakarta Batch TCK source code">
        <mkdir dir="${build}"/>

        <!-- compile test artifacts -->
        <javac srcdir="${src}" destdir="${build}">
            <classpath>
                <fileset dir="lib">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement path="${batch.impl.testng.path}"/>
                <fileset dir="artifacts">
                    <include name="**/com.ibm.jbatch.tck.spi-@project.version@.jar"/>
                </fileset>
            </classpath>
        </javac>
    </target>

    <target name="init">
         <loadproperties srcFile="batch-tck-testng.properties"/>
         <echo message="ant.java.version=${ant.java.version}"/>
         <echo message="java.version=${java.version}"/>
         <echo message="batch.impl.testng.path=${batch.impl.testng.path}"/>
    </target>

    <target name="clean">
        <delete dir="${build}"/>
        <delete dir="${results}"/>
    </target>

    <target name="run" depends="init" description="Runs the TestNG suite portion of the Jakarta Batch TCK ">
        <path id="batch.tck.classpath">
            <fileset dir="lib">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="artifacts">
                <include name="**/com.ibm.jbatch.tck.spi-@project.version@.jar"/>
                <include name="**/com.ibm.jbatch.tck-@project.version@.jar"/>
            </fileset>
            <pathelement path="${batch.impl.testng.path}"/>
        </path>

        <testng mode="testng" classpathref="batch.tck.classpath" dumpCommand="true" workingDir="." haltonfailure="true"
                outputdir="${results}">

            <xmlfileset dir="." includes="artifacts/batch-tck-impl-${tck.type}-suite.xml"/>

            <!-- user specified JVM arguments -->
            <jvmarg line="${jvm.options}"/>

            <!-- TCK test sleep property definitions -->
            <jvmarg value="-Dtck.execution.waiter.timeout=900000"/>
            <jvmarg value="-DExecutionTests.testInvokeJobWithUserStop.sleep=${ExecutionTests.testInvokeJobWithUserStop.sleep}"/>
            <jvmarg value="-DJobOperatorTests.testInvokeJobWithUserStop.sleep=${JobOperatorTests.testInvokeJobWithUserStop.sleep}"/>
            <jvmarg value="-DJobOperatorTests.testJobOperatorGetRunningJobExecutions.sleep=${JobOperatorTests.testJobOperatorGetRunningJobExecutions.sleep}"/>
            <jvmarg value="-DParallelExecutionTests.testStopRunningPartitionedStep.sleep=${ParallelExecutionTests.testStopRunningPartitionedStep.sleep}"/>
            <jvmarg value="-DParallelExecutionTests.testStopRestartRunningPartitionedStep.sleep=${ParallelExecutionTests.testStopRestartRunningPartitionedStep.sleep}"/>
            <jvmarg value="-DStopOrFailOnExitStatusWithRestartTests.testInvokeJobWithUserStop.sleep=${StopOrFailOnExitStatusWithRestartTests.testInvokeJobWithUserStop.sleep}"/>
            <jvmarg value="-DParallelExecutionTests.testInvokeJobWithOnePartitionedStepExitStatus.sleep=${ParallelExecutionTests.testInvokeJobWithOnePartitionedStepExitStatus.sleep}"/>
            <jvmarg value="-DJobOperatorTests.testJobOperatorGetRunningJobExecutions.app.timeinterval=${JobOperatorTests.testJobOperatorGetRunningJobExecutions.app.timeinterval}"/>
            <jvmarg value="-DJobOperatorTests.testJobOperatorGetRunningJobInstancesException.app.timeinterval=${JobOperatorTests.testJobOperatorGetRunningJobInstancesException.app.timeinterval}"/>
            <jvmarg value="-DTransactionTests.testGlobalTranNoExceptions.sleep=${TransactionTests.testGlobalTranNoExceptions.sleep}"/>
            <jvmarg value="-DTransactionTests.testGlobalTranForcedExceptionWithRollback.sleep=${TransactionTests.testGlobalTranForcedExceptionWithRollback.sleep}"/>
            <jvmarg value="-DTransactionTests.testGlobalTranForcedExceptionCheckpointRestart.sleep=${TransactionTests.testGlobalTranForcedExceptionCheckpointRestart.sleep}"/>
            <jvmarg value="-DTransactionTests.testGlobalTranNoDelayLongTimeout.sleep=${TransactionTests.testGlobalTranNoDelayLongTimeout.sleep}"/>
            <jvmarg value="-DTransactionTests.testGlobalTranLongDelayShortTimeoutThenNoDelayShortTimeout.sleep.1=${TransactionTests.testGlobalTranLongDelayShortTimeoutThenNoDelayShortTimeout.sleep.1}"/>
            <jvmarg value="-DTransactionTests.testGlobalTranLongDelayShortTimeoutThenNoDelayShortTimeout.sleep.2=${TransactionTests.testGlobalTranLongDelayShortTimeoutThenNoDelayShortTimeout.sleep.2}"/>
            <jvmarg value="-DTransactionTests.testGlobalTranLongDelayMixOfLongTimeoutStepsAndShortTimeoutSteps.sleep=${TransactionTests.testGlobalTranLongDelayMixOfLongTimeoutStepsAndShortTimeoutSteps.sleep}"/>
            <jvmarg value="-DTransactionTests.testGlobalTranLongDelayMixOfLongTimeoutStepsAndShortTimeoutStepsCustomCheckpointAlgorithm.sleep=${TransactionTests.testGlobalTranLongDelayMixOfLongTimeoutStepsAndShortTimeoutStepsCustomCheckpointAlgorithm.sleep}"/>
            <jvmarg value="-DTransactionTests.testGlobalTranForcedTimeoutCheckpointRestart.sleep.1=${TransactionTests.testGlobalTranForcedTimeoutCheckpointRestart.sleep.1}"/>
            <jvmarg value="-DTransactionTests.testGlobalTranForcedTimeoutCheckpointRestart.sleep.2=${TransactionTests.testGlobalTranForcedTimeoutCheckpointRestart.sleep.2}"/>
            <jvmarg value="-DChunkTests.testChunkTimeBased10Seconds.sleep=${ChunkTests.testChunkTimeBased10Seconds.sleep}"/>
            <jvmarg value="-DChunkTests.testChunkRestartTimeBasedCheckpoint.sleep=${ChunkTests.testChunkRestartTimeBasedCheckpoint.sleep}"/>
            <jvmarg value="-DChunkTests.testChunkTimeBasedTimeLimit0.sleep=${ChunkTests.testChunkTimeBasedTimeLimit0.sleep}"/>
            <jvmarg value="-DChunkTests.testChunkRestartTimeBasedDefaultCheckpoint.sleep=${ChunkTests.testChunkRestartTimeBasedDefaultCheckpoint.sleep}"/>
        </testng>
    </target>

</project>
